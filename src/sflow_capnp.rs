// @generated by the capnpc-rust plugin to the Cap'n Proto schema compiler.
// DO NOT EDIT.
// source: sflow.capnp


pub mod s_flow_flow_record {
  #[derive(Copy, Clone)]
  pub struct Owned(());
  impl ::capnp::introspect::Introspect for Owned { fn introspect() -> ::capnp::introspect::Type { ::capnp::introspect::TypeVariant::Struct(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types, annotation_types: _private::get_annotation_types }).into() } }
  impl ::capnp::traits::Owned for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::OwnedStruct for Owned { type Reader<'a> = Reader<'a>; type Builder<'a> = Builder<'a>; }
  impl ::capnp::traits::Pipelined for Owned { type Pipeline = Pipeline; }

  pub struct Reader<'a> { reader: ::capnp::private::layout::StructReader<'a> }
  impl <> ::core::marker::Copy for Reader<'_,>  {}
  impl <> ::core::clone::Clone for Reader<'_,>  {
    fn clone(&self) -> Self { *self }
  }

  impl <> ::capnp::traits::HasTypeId for Reader<'_,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructReader<'a>> for Reader<'a,>  {
    fn from(reader: ::capnp::private::layout::StructReader<'a>) -> Self {
      Self { reader,  }
    }
  }

  impl <'a,> ::core::convert::From<Reader<'a,>> for ::capnp::dynamic_value::Reader<'a>  {
    fn from(reader: Reader<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Reader::new(reader.reader, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <> ::core::fmt::Debug for Reader<'_,>  {
    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::result::Result<(), ::core::fmt::Error> {
      core::fmt::Debug::fmt(&::core::convert::Into::<::capnp::dynamic_value::Reader<'_>>::into(*self), f)
    }
  }

  impl <'a,> ::capnp::traits::FromPointerReader<'a> for Reader<'a,>  {
    fn get_from_pointer(reader: &::capnp::private::layout::PointerReader<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(reader.get_struct(default)?.into())
    }
  }

  impl <'a,> ::capnp::traits::IntoInternalStructReader<'a> for Reader<'a,>  {
    fn into_internal_struct_reader(self) -> ::capnp::private::layout::StructReader<'a> {
      self.reader
    }
  }

  impl <'a,> ::capnp::traits::Imbue<'a> for Reader<'a,>  {
    fn imbue(&mut self, cap_table: &'a ::capnp::private::layout::CapTable) {
      self.reader.imbue(::capnp::private::layout::CapTableReader::Plain(cap_table))
    }
  }

  impl <'a,> Reader<'a,>  {
    pub fn reborrow(&self) -> Reader<'_,> {
      Self { .. *self }
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.reader.total_size()
    }
    #[inline]
    pub fn get_time_received_ns(self) -> u64 {
      self.reader.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn get_agent_addr(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_agent_addr(&self) -> bool {
      !self.reader.get_pointer_field(0).is_null()
    }
    #[inline]
    pub fn get_agent_port(self) -> u16 {
      self.reader.get_data_field::<u16>(4)
    }
    #[inline]
    pub fn get_agent_sub_id(self) -> u32 {
      self.reader.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn get_datagram_sequence_number(self) -> u32 {
      self.reader.get_data_field::<u32>(4)
    }
    #[inline]
    pub fn get_uptime(self) -> u32 {
      self.reader.get_data_field::<u32>(5)
    }
    #[inline]
    pub fn get_sample_sequence_number(self) -> u32 {
      self.reader.get_data_field::<u32>(6)
    }
    #[inline]
    pub fn get_source_id(self) -> u32 {
      self.reader.get_data_field::<u32>(7)
    }
    #[inline]
    pub fn get_sampling_rate(self) -> u32 {
      self.reader.get_data_field::<u32>(8)
    }
    #[inline]
    pub fn get_sample_pool(self) -> u32 {
      self.reader.get_data_field::<u32>(9)
    }
    #[inline]
    pub fn get_drops(self) -> u32 {
      self.reader.get_data_field::<u32>(10)
    }
    #[inline]
    pub fn get_input_interface(self) -> u32 {
      self.reader.get_data_field::<u32>(11)
    }
    #[inline]
    pub fn get_output_interface(self) -> u32 {
      self.reader.get_data_field::<u32>(12)
    }
    #[inline]
    pub fn get_length(self) -> u32 {
      self.reader.get_data_field::<u32>(13)
    }
    #[inline]
    pub fn get_protocol(self) -> u32 {
      self.reader.get_data_field::<u32>(14)
    }
    #[inline]
    pub fn get_src_ip(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_src_ip(&self) -> bool {
      !self.reader.get_pointer_field(1).is_null()
    }
    #[inline]
    pub fn get_dst_ip(self) -> ::capnp::Result<::capnp::data::Reader<'a>> {
      ::capnp::traits::FromPointerReader::get_from_pointer(&self.reader.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn has_dst_ip(&self) -> bool {
      !self.reader.get_pointer_field(2).is_null()
    }
    #[inline]
    pub fn get_src_port(self) -> u32 {
      self.reader.get_data_field::<u32>(15)
    }
    #[inline]
    pub fn get_dst_port(self) -> u32 {
      self.reader.get_data_field::<u32>(16)
    }
    #[inline]
    pub fn get_tcp_flags(self) -> u32 {
      self.reader.get_data_field::<u32>(17)
    }
    #[inline]
    pub fn get_tos(self) -> u32 {
      self.reader.get_data_field::<u32>(18)
    }
  }

  pub struct Builder<'a> { builder: ::capnp::private::layout::StructBuilder<'a> }
  impl <> ::capnp::traits::HasStructSize for Builder<'_,>  {
    const STRUCT_SIZE: ::capnp::private::layout::StructSize = ::capnp::private::layout::StructSize { data: 10, pointers: 3 };
  }
  impl <> ::capnp::traits::HasTypeId for Builder<'_,>  {
    const TYPE_ID: u64 = _private::TYPE_ID;
  }
  impl <'a,> ::core::convert::From<::capnp::private::layout::StructBuilder<'a>> for Builder<'a,>  {
    fn from(builder: ::capnp::private::layout::StructBuilder<'a>) -> Self {
      Self { builder,  }
    }
  }

  impl <'a,> ::core::convert::From<Builder<'a,>> for ::capnp::dynamic_value::Builder<'a>  {
    fn from(builder: Builder<'a,>) -> Self {
      Self::Struct(::capnp::dynamic_struct::Builder::new(builder.builder, ::capnp::schema::StructSchema::new(::capnp::introspect::RawBrandedStructSchema { generic: &_private::RAW_SCHEMA, field_types: _private::get_field_types::<>, annotation_types: _private::get_annotation_types::<>})))
    }
  }

  impl <'a,> ::capnp::traits::ImbueMut<'a> for Builder<'a,>  {
    fn imbue_mut(&mut self, cap_table: &'a mut ::capnp::private::layout::CapTable) {
      self.builder.imbue(::capnp::private::layout::CapTableBuilder::Plain(cap_table))
    }
  }

  impl <'a,> ::capnp::traits::FromPointerBuilder<'a> for Builder<'a,>  {
    fn init_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, _size: u32) -> Self {
      builder.init_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE).into()
    }
    fn get_from_pointer(builder: ::capnp::private::layout::PointerBuilder<'a>, default: ::core::option::Option<&'a [::capnp::Word]>) -> ::capnp::Result<Self> {
      ::core::result::Result::Ok(builder.get_struct(<Self as ::capnp::traits::HasStructSize>::STRUCT_SIZE, default)?.into())
    }
  }

  impl <> ::capnp::traits::SetterInput<Owned<>> for Reader<'_,>  {
    fn set_pointer_builder(mut pointer: ::capnp::private::layout::PointerBuilder<'_>, value: Self, canonicalize: bool) -> ::capnp::Result<()> { pointer.set_struct(&value.reader, canonicalize) }
  }

  impl <'a,> Builder<'a,>  {
    pub fn into_reader(self) -> Reader<'a,> {
      self.builder.into_reader().into()
    }
    pub fn reborrow(&mut self) -> Builder<'_,> {
      Builder { builder: self.builder.reborrow() }
    }
    pub fn reborrow_as_reader(&self) -> Reader<'_,> {
      self.builder.as_reader().into()
    }

    pub fn total_size(&self) -> ::capnp::Result<::capnp::MessageSize> {
      self.builder.as_reader().total_size()
    }
    #[inline]
    pub fn get_time_received_ns(self) -> u64 {
      self.builder.get_data_field::<u64>(0)
    }
    #[inline]
    pub fn set_time_received_ns(&mut self, value: u64)  {
      self.builder.set_data_field::<u64>(0, value);
    }
    #[inline]
    pub fn get_agent_addr(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(0), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_agent_addr(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(0).set_data(value);
    }
    #[inline]
    pub fn init_agent_addr(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(0).init_data(size)
    }
    #[inline]
    pub fn has_agent_addr(&self) -> bool {
      !self.builder.is_pointer_field_null(0)
    }
    #[inline]
    pub fn get_agent_port(self) -> u16 {
      self.builder.get_data_field::<u16>(4)
    }
    #[inline]
    pub fn set_agent_port(&mut self, value: u16)  {
      self.builder.set_data_field::<u16>(4, value);
    }
    #[inline]
    pub fn get_agent_sub_id(self) -> u32 {
      self.builder.get_data_field::<u32>(3)
    }
    #[inline]
    pub fn set_agent_sub_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(3, value);
    }
    #[inline]
    pub fn get_datagram_sequence_number(self) -> u32 {
      self.builder.get_data_field::<u32>(4)
    }
    #[inline]
    pub fn set_datagram_sequence_number(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(4, value);
    }
    #[inline]
    pub fn get_uptime(self) -> u32 {
      self.builder.get_data_field::<u32>(5)
    }
    #[inline]
    pub fn set_uptime(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(5, value);
    }
    #[inline]
    pub fn get_sample_sequence_number(self) -> u32 {
      self.builder.get_data_field::<u32>(6)
    }
    #[inline]
    pub fn set_sample_sequence_number(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(6, value);
    }
    #[inline]
    pub fn get_source_id(self) -> u32 {
      self.builder.get_data_field::<u32>(7)
    }
    #[inline]
    pub fn set_source_id(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(7, value);
    }
    #[inline]
    pub fn get_sampling_rate(self) -> u32 {
      self.builder.get_data_field::<u32>(8)
    }
    #[inline]
    pub fn set_sampling_rate(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(8, value);
    }
    #[inline]
    pub fn get_sample_pool(self) -> u32 {
      self.builder.get_data_field::<u32>(9)
    }
    #[inline]
    pub fn set_sample_pool(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(9, value);
    }
    #[inline]
    pub fn get_drops(self) -> u32 {
      self.builder.get_data_field::<u32>(10)
    }
    #[inline]
    pub fn set_drops(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(10, value);
    }
    #[inline]
    pub fn get_input_interface(self) -> u32 {
      self.builder.get_data_field::<u32>(11)
    }
    #[inline]
    pub fn set_input_interface(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(11, value);
    }
    #[inline]
    pub fn get_output_interface(self) -> u32 {
      self.builder.get_data_field::<u32>(12)
    }
    #[inline]
    pub fn set_output_interface(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(12, value);
    }
    #[inline]
    pub fn get_length(self) -> u32 {
      self.builder.get_data_field::<u32>(13)
    }
    #[inline]
    pub fn set_length(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(13, value);
    }
    #[inline]
    pub fn get_protocol(self) -> u32 {
      self.builder.get_data_field::<u32>(14)
    }
    #[inline]
    pub fn set_protocol(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(14, value);
    }
    #[inline]
    pub fn get_src_ip(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(1), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_src_ip(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(1).set_data(value);
    }
    #[inline]
    pub fn init_src_ip(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(1).init_data(size)
    }
    #[inline]
    pub fn has_src_ip(&self) -> bool {
      !self.builder.is_pointer_field_null(1)
    }
    #[inline]
    pub fn get_dst_ip(self) -> ::capnp::Result<::capnp::data::Builder<'a>> {
      ::capnp::traits::FromPointerBuilder::get_from_pointer(self.builder.get_pointer_field(2), ::core::option::Option::None)
    }
    #[inline]
    pub fn set_dst_ip(&mut self, value: ::capnp::data::Reader<'_>)  {
      self.builder.reborrow().get_pointer_field(2).set_data(value);
    }
    #[inline]
    pub fn init_dst_ip(self, size: u32) -> ::capnp::data::Builder<'a> {
      self.builder.get_pointer_field(2).init_data(size)
    }
    #[inline]
    pub fn has_dst_ip(&self) -> bool {
      !self.builder.is_pointer_field_null(2)
    }
    #[inline]
    pub fn get_src_port(self) -> u32 {
      self.builder.get_data_field::<u32>(15)
    }
    #[inline]
    pub fn set_src_port(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(15, value);
    }
    #[inline]
    pub fn get_dst_port(self) -> u32 {
      self.builder.get_data_field::<u32>(16)
    }
    #[inline]
    pub fn set_dst_port(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(16, value);
    }
    #[inline]
    pub fn get_tcp_flags(self) -> u32 {
      self.builder.get_data_field::<u32>(17)
    }
    #[inline]
    pub fn set_tcp_flags(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(17, value);
    }
    #[inline]
    pub fn get_tos(self) -> u32 {
      self.builder.get_data_field::<u32>(18)
    }
    #[inline]
    pub fn set_tos(&mut self, value: u32)  {
      self.builder.set_data_field::<u32>(18, value);
    }
  }

  pub struct Pipeline { _typeless: ::capnp::any_pointer::Pipeline }
  impl ::capnp::capability::FromTypelessPipeline for Pipeline {
    fn new(typeless: ::capnp::any_pointer::Pipeline) -> Self {
      Self { _typeless: typeless,  }
    }
  }
  impl Pipeline  {
  }
  mod _private {
    pub static ENCODED_NODE: [::capnp::Word; 349] = [
      ::capnp::word(0, 0, 0, 0, 6, 0, 6, 0),
      ::capnp::word(26, 85, 235, 151, 144, 216, 39, 207),
      ::capnp::word(12, 0, 0, 0, 1, 0, 10, 0),
      ::capnp::word(201, 184, 167, 246, 229, 212, 195, 184),
      ::capnp::word(3, 0, 7, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(153, 0, 0, 0, 141, 3, 0, 0),
      ::capnp::word(21, 0, 0, 0, 226, 0, 0, 0),
      ::capnp::word(33, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(29, 0, 0, 0, 159, 4, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 102, 108, 111, 119, 46, 99, 97),
      ::capnp::word(112, 110, 112, 58, 83, 70, 108, 111),
      ::capnp::word(119, 70, 108, 111, 119, 82, 101, 99),
      ::capnp::word(111, 114, 100, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 1, 0, 1, 0),
      ::capnp::word(84, 0, 0, 0, 3, 0, 4, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(61, 2, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(60, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(72, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(1, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(69, 2, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(68, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(80, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(2, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(77, 2, 0, 0, 82, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(76, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(88, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(3, 0, 0, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 3, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(85, 2, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(84, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(96, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(4, 0, 0, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 4, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(93, 2, 0, 0, 186, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(96, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(108, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(5, 0, 0, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 5, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 2, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(112, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(6, 0, 0, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 6, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(109, 2, 0, 0, 170, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(124, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(7, 0, 0, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 7, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(121, 2, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(120, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(132, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(8, 0, 0, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 8, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(129, 2, 0, 0, 106, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(128, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(140, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(9, 0, 0, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 9, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(137, 2, 0, 0, 90, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(136, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(148, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(10, 0, 0, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 10, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(145, 2, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(140, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(152, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(11, 0, 0, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 11, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(149, 2, 0, 0, 122, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(148, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(160, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(12, 0, 0, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 12, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(157, 2, 0, 0, 130, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(156, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(168, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(13, 0, 0, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 13, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(165, 2, 0, 0, 58, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(160, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(172, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(14, 0, 0, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 14, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(169, 2, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(168, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(180, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(15, 0, 0, 0, 1, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(177, 2, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(172, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(184, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(16, 0, 0, 0, 2, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(181, 2, 0, 0, 50, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(176, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(188, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(17, 0, 0, 0, 15, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(185, 2, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(180, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(192, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(18, 0, 0, 0, 16, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(189, 2, 0, 0, 66, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(184, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(196, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(19, 0, 0, 0, 17, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 19, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(193, 2, 0, 0, 74, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(192, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(204, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(20, 0, 0, 0, 18, 0, 0, 0),
      ::capnp::word(0, 0, 1, 0, 20, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(201, 2, 0, 0, 34, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(196, 2, 0, 0, 3, 0, 1, 0),
      ::capnp::word(208, 2, 0, 0, 2, 0, 1, 0),
      ::capnp::word(116, 105, 109, 101, 82, 101, 99, 101),
      ::capnp::word(105, 118, 101, 100, 78, 115, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(9, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 103, 101, 110, 116, 65, 100, 100),
      ::capnp::word(114, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 103, 101, 110, 116, 80, 111, 114),
      ::capnp::word(116, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(7, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(97, 103, 101, 110, 116, 83, 117, 98),
      ::capnp::word(73, 100, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 97, 116, 97, 103, 114, 97, 109),
      ::capnp::word(83, 101, 113, 117, 101, 110, 99, 101),
      ::capnp::word(78, 117, 109, 98, 101, 114, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(117, 112, 116, 105, 109, 101, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 109, 112, 108, 101, 83, 101),
      ::capnp::word(113, 117, 101, 110, 99, 101, 78, 117),
      ::capnp::word(109, 98, 101, 114, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 111, 117, 114, 99, 101, 73, 100),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 109, 112, 108, 105, 110, 103),
      ::capnp::word(82, 97, 116, 101, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 97, 109, 112, 108, 101, 80, 111),
      ::capnp::word(111, 108, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 114, 111, 112, 115, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(105, 110, 112, 117, 116, 73, 110, 116),
      ::capnp::word(101, 114, 102, 97, 99, 101, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(111, 117, 116, 112, 117, 116, 73, 110),
      ::capnp::word(116, 101, 114, 102, 97, 99, 101, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(108, 101, 110, 103, 116, 104, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(112, 114, 111, 116, 111, 99, 111, 108),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 114, 99, 73, 112, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 115, 116, 73, 112, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(13, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(115, 114, 99, 80, 111, 114, 116, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(100, 115, 116, 80, 111, 114, 116, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 99, 112, 70, 108, 97, 103, 115),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(116, 111, 115, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(8, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
      ::capnp::word(0, 0, 0, 0, 0, 0, 0, 0),
    ];
    pub fn get_field_types(index: u16) -> ::capnp::introspect::Type {
      match index {
        0 => <u64 as ::capnp::introspect::Introspect>::introspect(),
        1 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        2 => <u16 as ::capnp::introspect::Introspect>::introspect(),
        3 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        4 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        5 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        6 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        7 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        8 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        9 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        10 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        11 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        12 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        13 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        14 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        15 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        16 => <::capnp::data::Owned as ::capnp::introspect::Introspect>::introspect(),
        17 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        18 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        19 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        20 => <u32 as ::capnp::introspect::Introspect>::introspect(),
        _ => ::capnp::introspect::panic_invalid_field_index(index),
      }
    }
    pub fn get_annotation_types(child_index: Option<u16>, index: u32) -> ::capnp::introspect::Type {
      ::capnp::introspect::panic_invalid_annotation_indices(child_index, index)
    }
    pub static RAW_SCHEMA: ::capnp::introspect::RawStructSchema = ::capnp::introspect::RawStructSchema {
      encoded_node: &ENCODED_NODE,
      nonunion_members: NONUNION_MEMBERS,
      members_by_discriminant: MEMBERS_BY_DISCRIMINANT,
      members_by_name: MEMBERS_BY_NAME,
    };
    pub static NONUNION_MEMBERS : &[u16] = &[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20];
    pub static MEMBERS_BY_DISCRIMINANT : &[u16] = &[];
    pub static MEMBERS_BY_NAME : &[u16] = &[1,2,3,4,10,16,18,11,13,12,14,9,6,8,7,15,17,19,0,20,5];
    pub const TYPE_ID: u64 = 0xcf27_d890_97eb_551a;
  }
}
